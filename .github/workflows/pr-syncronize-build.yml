#  _     _ _              _       _              _
# | |__ (_) | ____ _ _ __(_) __ _(_)  _ __   ___| |_
# | '_ \| | |/ / _` | '__| |/ _` | | | '_ \ / _ \ __|
# | | | | |   < (_| | |  | | (_| | |_| | | |  __/ |_
# |_| |_|_|_|\_\__,_|_|  |_|\__,_|_(_)_| |_|\___|\__|
#
# https://github.com/yqlbu/neovim-server
#
# Copyright (C) 2020-2022 yqlbu <https://hikariai.net>
#
# This is a open-source software, liscensed under the MIT License.
# See /License for more information.

name: PR Development Build

# Controls when the action will run.
on:
  # Trigger when PR matches certain events
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # PR-based CI flow
  multi-arch-build-flow:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Get current tag version and pass it as environment variable
      - name: Set environment variable
        run: |
          echo "REGISTRY_USERNAME=hikariai" >> $GITHUB_ENV
          echo "REGISTRY=docker.io" >> $GITHUB_ENV
          echo "REPOSITORY=hikariai-web" >> $GITHUB_ENV
          echo "IMAGE_TAG=staging" >> $GITHUB_ENV
          # project related params
          echo "ENV=staging" >> $GITHUB_ENV
          echo "DOMAIN=staging.hikariai.net" >> $GITHUB_ENV

      # The docker/setup-qemu action installs QEMU static binaries, which are used to run builders for architectures other than the host.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      # The docker/setup-buildx action configures buildx, which is a Docker CLI plugin that provides enhanced build capabilities.
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Get git sha short
        id: export_sha
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      # Login to GitHub Container Registry
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Build and Push the images
      - name: Build and Push Latest Image
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./ci/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}-${{ steps.vars.outputs.sha_short }}
          build-args: |
            ENV=${{ env.ENV }},DOMAIN_NAME=${{ env.DOMAIN }}

    # Workflow outputs
    outputs:
      repository: ${{ env.REPOSITORY }}
      git_pr_sha_short: ${{ steps.identify.outputs.git_pr_sha_short }}

  # pre-deploy-
  pre-deploy-flow:
    # Depends on previous workflow
    needs: multi-arch-build-flow
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set environment variable
        run: |
          # repository related
          echo "ENV=staging" >> $GITHUB_ENV
          echo "REPOSITORY={{ needs.multi-arch-build-flow.outputs.repository }}" >> $GITHUB_ENV
          echo "DEPLOYMENT_REPOSITORY=vsphere-hub" >> $GITHUB_ENV

      - name: Clone k8s deployment private repository
        uses: GuillaumeFalourd/clone-github-repo-action@v2
        with:
          owner: ${{ github.repository_owner }}
          repository: ${{ env.DEPLOYMENT_REPOSITORY }}
          access-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Generate deploy manifest from Jinja template
        uses: cuchi/jinja2-action@v1.1.0
        with: 
          template: tmpl/deployment.j2
          output_file: vsphere-hub/cicd/${{ env.REPOSITORY }}/kustomize/overlays/${{ env.ENV }}/deployment.yaml
          strict: true
          variables: |
            image_name=${{ env.REPOSITORY }}
            image_deploy_tag=${{ env.ENV }}-${{ needs.multi-arch-build-flow.outputs.git_pr_sha_short }}

      - name: Commit deploy manifest on remote deployment repo
        run: |
          cd ${{ env.DEPLOYMENT_REPOSITORY }}
          cat cicd/${{ env.REPOSITORY }}/kustomize/overlays/${{ env.ENV }}/deployment.yaml
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -s -m "ci: generate deployment overlay manifests" 

      # - name: Push changes to remote deployment repo
      #   uses: GuillaumeFalourd/git-commit-push@v1.3
      #   with:
      #     target_branch: master
      #     files: .
      #     remote_repository: https://github.com/${{ github.repository_owner }}/${{ env.DEPLOYMENT_REPOSITORY }}
      #     access_token: ${{ secrets.ACCESS_TOKEN }}
      #     force: true
