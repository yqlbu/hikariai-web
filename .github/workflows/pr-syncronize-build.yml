#  _     _ _              _       _              _
# | |__ (_) | ____ _ _ __(_) __ _(_)  _ __   ___| |_
# | '_ \| | |/ / _` | '__| |/ _` | | | '_ \ / _ \ __|
# | | | | |   < (_| | |  | | (_| | |_| | | |  __/ |_
# |_| |_|_|_|\_\__,_|_|  |_|\__,_|_(_)_| |_|\___|\__|
#
# https://github.com/yqlbu/neovim-server
#
# Copyright (C) 2020-2022 yqlbu <https://hikariai.net>
#
# This is a open-source software, liscensed under the MIT License.
# See /License for more information.

name: PR Development Build

# Controls when the action will run.
on:
  # Trigger when PR matches certain events
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # PR-based CI flow
  multi-arch-build-flow:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Get current tag version and pass it as environment variable
      - name: Set environment variables
        run: |
          echo "REGISTRY_USERNAME=hikariai" >> $GITHUB_ENV
          echo "REGISTRY=docker.io" >> $GITHUB_ENV
          echo "REPOSITORY=hikariai-web" >> $GITHUB_ENV
          echo "IMAGE_TAG=staging" >> $GITHUB_ENV
          # project related params
          echo "ENV=staging" >> $GITHUB_ENV
          echo "DOMAIN=staging.hikariai.net" >> $GITHUB_ENV

      # The docker/setup-qemu action installs QEMU static binaries, which are used to run builders for architectures other than the host.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      # The docker/setup-buildx action configures buildx, which is a Docker CLI plugin that provides enhanced build capabilities.
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Get git sha short
        id: export_sha
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      # Login to GitHub Container Registry
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Build and Push the images
      - name: Build and Push Latest Image
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./ci/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}-${{ steps.export_sha.outputs.sha_short }}
          build-args: |
            ENV=${{ env.ENV }},DOMAIN_NAME=${{ env.DOMAIN }}

    # Workflow outputs
    outputs:
      env: ${{ env.ENV }}
      git_repository: ${{ env.REPOSITORY }}
      git_pr_sha_short: ${{ steps.export_sha.outputs.sha_short }}
      git_commit_message: ${{ github.event.commits[0].message }}

  # pre-deploy-
  pre-deploy-flow:
    # Depends on previous workflow
    needs: multi-arch-build-flow
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set environment variables
        run: |
          # repository related
          echo "ENV=${{ needs.multi-arch-build-flow.outputs.env }}" >> $GITHUB_ENV
          echo "REPOSITORY=${{ needs.multi-arch-build-flow.outputs.git_repository }}" >> $GITHUB_ENV
          echo "DEPLOYMENT_REPOSITORY=vsphere-hub" >> $GITHUB_ENV

      - name: Checkout k8s deployment private repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/${{ env.DEPLOYMENT_REPOSITORY }}
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Generate deploy manifest from Jinja template
        uses: cuchi/jinja2-action@v1.1.0
        with: 
          template: cicd/${{ env.REPOSITORY }}/kustomize/tmpl/deployment.yaml.j2
          output_file: cicd/${{ env.REPOSITORY }}/kustomize/overlays/${{ env.ENV }}/deployment.yaml
          strict: true
          variables: |
            image_name=${{ env.REPOSITORY }}
            image_deploy_tag=${{ env.ENV }}-${{ needs.multi-arch-build-flow.outputs.git_pr_sha_short }}

      - name: Inspect deployment manifest
        run: |
          cat cicd/${{ env.REPOSITORY }}/kustomize/overlays/${{ env.ENV }}/deployment.yaml

      - name: Commit deploy manifest on remote deployment repo
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -s -m "ci: generate deployment overlay manifests" 

      - name: Push local changes to remote deployment repository
        uses: github-actions-x/commit@v2.9
        with:
          push-branch: master
          github-token: ${{ secrets.ACCESS_TOKEN }}
          commit-message: "ci: generate deployment overlay manifests"

  # post-actions
  post-action-flow:
    # Depends on previous workflows
    needs: [multi-arch-build-flow, pre-deploy-flow]
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Get jobs id from the workflow run
        uses: octokit/request-action@v2.x
        id: get_jobs_id
        with:
          route: GET /repos/{owner}/{repo}/actions/runs/{id}/jobs
          owner: ${{ github.repository_owner }}
          repo: ${{ needs.multi-arch-build-flow.outputs.git_repository }}
          id: ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: Show jobs id
        run: |
          "echo ${{ fromJson(steps.get_jobs_id.outputs.data)[0].id }}"

      # Notify build result on Telegram
      # - name: Send telegram message to notify build result
      #   uses: appleboy/telegram-action@master
      #   with:
      #     to: ${{ secrets.TELEGRAM_TO }}
      #     token: ${{ secrets.TELEGRAM_TOKEN }}
      #     message: |
      #       ðŸ•¹ A new github-action build was trigged by: ${{ github.repository_owner }} (https://github.com/${{ github.repository_owner }})

      #       Commit Message: ${{ needs.multi-arch-build-flow.outputs.git_commit_message }}

      #       Deployment Stage: ${{ needs.multi-arch-build-flow.outputs.env }}

      #       Repository: ${{ github.repository }}

      #       Changes: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}

      #       Build Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      #       Build Summary:

      #         - multi-arch-build-flow: ${{ needs.multi-arch-build-flow.result }} - ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ needs.multi-arch-build-flow.outputs.run_id }}?check_suite_focus=true

      #         - pre-deploy-flow: ${{ needs.pre-deploy-flow.result }} - ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ needs.pre-deploy-flow.outputs.run_id }}?check_suite_focus=true

      #         - post-action-flow: ${{ needs.post-actions-flow.result }} - ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ steps.export_run_id.outputs.run_id }}?check_suite_focus=true

