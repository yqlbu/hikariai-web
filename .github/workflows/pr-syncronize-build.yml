#  _     _ _              _       _              _
# | |__ (_) | ____ _ _ __(_) __ _(_)  _ __   ___| |_
# | '_ \| | |/ / _` | '__| |/ _` | | | '_ \ / _ \ __|
# | | | | |   < (_| | |  | | (_| | |_| | | |  __/ |_
# |_| |_|_|_|\_\__,_|_|  |_|\__,_|_(_)_| |_|\___|\__|
#
# https://github.com/yqlbu/neovim-server
#
# Copyright (C) 2020-2022 yqlbu <https://hikariai.net>
#
# This is a open-source software, liscensed under the MIT License.
# See /License for more information.

name: PR Development Build

# Controls when the action will run.
on:
  # Trigger when PR matches certain events
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Workflow related global environment variables
env:
  ENV: staging
  REPOSITORY: hikariai-web
  REGISTRY: docker.io
  REGISTRY_USERNAME: hikariai
  IMAGE_TAG: staging

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # pre-actions
  pre-action-job:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Get PR context
        id: export_pr_context
        run: |
          echo "::set-output name=pr_number::${{ github.event.pull_request.number }}"
          echo "::set-output name=pr_url::${{ github.event.pull_request.html_url }}"

      - name: Get last git sha
        id: export_commit_sha
        run: |
          echo "::set-output name=sha_long::${{ github.event.pull_request.head.sha }}"
          echo "::set-output name=sha_short::$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-6)"

      - name: Get last git commit
        uses: octokit/request-action@v2.x
        id: export_commit_message
        with:
          route: GET /repos/{owner}/{repo}/git/commits/{sha}
          owner: ${{ github.repository_owner }}
          repo: ${{ env.REPOSITORY }}
          sha: ${{ steps.export_commit_sha.outputs.sha_long }}
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

    # Workflow outputs
    outputs:
      git_pr_number: ${{ steps.export_pr_context.outputs.pr_number }}
      git_pr_url: ${{ steps.export_pr_context.outputs.pr_url }}
      git_sha_long: ${{ steps.export_commit_sha.outputs.sha_long }}
      git_sha_short: ${{ steps.export_commit_sha.outputs.sha_short }}
      git_commit_message: ${{ fromJson(steps.export_commit_message.outputs.data).message }}

  # PR-based CI flow
  multi-arch-build-stage:
    # Depends on previous workflow
    needs: [pre-action-job]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Define job related environment variables
    env:
      DOMAIN: staging.hikariai.net
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # The docker/setup-qemu action installs QEMU static binaries, which are used to run builders for architectures other than the host.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      # The docker/setup-buildx action configures buildx, which is a Docker CLI plugin that provides enhanced build capabilities.
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Login to GitHub Container Registry
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Build and Push the images
      - name: Build and Push Latest Image
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./ci/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}-${{ needs.pre-action-job.outputs.git_sha_short }}
          build-args: |
            ENV=${{ env.ENV }},DOMAIN_NAME=${{ env.DOMAIN }}

  # pre-deploy-
  pre-deploy-stage:
    # Depends on previous workflows
    needs: [pre-deploy-stage, multi-arch-build-stage]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Define job related environment variables
    env:
      DEPLOYMENT_REPOSITORY: vsphere-hub
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout k8s deployment private repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/${{ env.DEPLOYMENT_REPOSITORY }}
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Generate deploy manifest from Jinja template
        uses: cuchi/jinja2-action@v1.1.0
        with: 
          template: cicd/${{ env.REPOSITORY }}/kustomize/tmpl/deployment.yaml.j2
          output_file: cicd/${{ env.REPOSITORY }}/kustomize/overlays/${{ env.ENV }}/deployment.yaml
          strict: true
          variables: |
            image_name=${{ env.REPOSITORY }}
            image_deploy_tag=${{ env.ENV }}-${{ needs.pre-action-job.outputs.git_sha_short }}

      - name: Inspect deployment manifest
        run: |
          cat cicd/${{ env.REPOSITORY }}/kustomize/overlays/${{ env.ENV }}/deployment.yaml

      - name: Commit deploy manifest on remote deployment repo
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -s -m "ci: generate deployment overlay manifests" 

      - name: Push local changes to remote deployment repository
        uses: github-actions-x/commit@v2.9
        with:
          push-branch: master
          github-token: ${{ secrets.ACCESS_TOKEN }}
          commit-message: "ci: generate deployment overlay manifests"

  # post-actions
  post-action-flow:
    # Depends on previous workflows
    needs: [pre-action-job, multi-arch-build-stage, pre-deploy-stage]
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Get jobs id from the workflow run
        uses: octokit/request-action@v2.x
        id: get_jobs_id
        with:
          route: GET /repos/{owner}/{repo}/actions/runs/{id}/jobs
          owner: ${{ github.repository_owner }}
          repo: ${{ env.REPOSITORY }}
          id: ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: Export jobs id and conclusion
        run: |
          echo 'JOB_ID_1=${{ fromJson(steps.get_jobs_id.outputs.data).jobs[0].id }}' >> $GITHUB_ENV
          echo 'JOB_ID_2=${{ fromJson(steps.get_jobs_id.outputs.data).jobs[1].id }}' >> $GITHUB_ENV
          echo 'JOB_ID_3=${{ fromJson(steps.get_jobs_id.outputs.data).jobs[2].id }}' >> $GITHUB_ENV
          echo 'JOB_CONCLUSION_1=${{ fromJson(steps.get_jobs_id.outputs.data).jobs[0].conclusion }}' >> $GITHUB_ENV
          echo 'JOB_CONCLUSION_2=${{ fromJson(steps.get_jobs_id.outputs.data).jobs[1].conclusion }}' >> $GITHUB_ENV

      #Notify build result on Telegram
      - name: Send telegram message to notify build result
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ðŸ•¹ A new github-action build was trigged by: ${{ github.repository_owner }} (https://github.com/${{ github.repository_owner }})

            Commit Message: "${{ needs.pre-action-job.outputs.git_commit_message }}"

            Commit Details: ${{ needs.pre-action-job.outputs.git_pr_url }}/commits/${{ steps.pre-action-job.git_sha_long }}

            Deployment Stage: ${{ env.ENV }}

            Repository: ${{ github.repository }}

            Changes: ${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.pre-action-job.git_sha_long }}

            Build Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Build Summary:

              * [${{ env.JOB_CONCLUSION_1 }}] multi-arch-build-stage: ${{ github.server_url }}/${{ github.repository }}/runs/${{ env.JOB_ID_1 }}?check_suite_focus=true

              * [${{ env.JOB_CONCLUSION_2 }}] pre-deploy-stage: ${{ github.server_url }}/${{ github.repository }}/runs/${{ env.JOB_ID_2 }}?check_suite_focus=true

              * [success] post-action-flow: success - ${{ github.server_url }}/${{ github.repository }}/runs/${{ env.JOB_ID_3 }}?check_suite_focus=true
